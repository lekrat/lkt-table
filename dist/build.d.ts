declare class A {
    constructor(l?: string, i?: string);
    sortable: boolean;
    hidden: boolean;
    preferSlot: boolean;
    type: string;
    field: Ke;
    resource: string;
    resourceData: {};
    isMultiple: boolean;
    multipleDisplay: string;
    multipleDisplayEdition: string;
    key: string | undefined;
    label: string | undefined;
    setIsSortable(l?: boolean): this;
    setIsEditable(l?: boolean): this;
    editable: boolean | undefined;
    setIsHidden(l?: boolean): this;
    setFormatter(l?: undefined): this;
    formatter: any;
    setEmptyChecker(l?: undefined): this;
    checkEmpty: any;
    setColSpan(l?: undefined): this;
    colspan: any;
    getHref(l: any): any;
    doAction(l: any): any;
    defineAsLink(l: any): this;
    link: any;
    defineAsText(): this;
    defineAsEmail(): this;
    defineAsTel(): this;
    defineAsInteger(): this;
    defineAsFloat(): this;
    defineAsCheck(): this;
    defineAsSwitch(): this;
    defineAsFile(): this;
    defineAsAction(l: any): this;
    action: any;
    defineAsSelect(l: any): this;
    options: any;
    setIsMultiple(l?: boolean): this;
    setResource(l: any): this;
    setResourceSlot(l: any): this;
    resourceSlot: any;
    setResourceData(l: any): this;
    setMultipleDisplay(l: any): this;
    setMultipleDisplayToList(): this;
    setMultipleDisplayToInline(): this;
    setMultipleDisplayToCount(): this;
    setMultipleDisplayEdition(l: any): this;
    setMultipleDisplayEditionToList(): this;
    setMultipleDisplayEditionToInline(): this;
    setSlotData(l: any): this;
    slotData: any;
    setAutoLoadSelectOptions(l?: boolean, i?: string): this;
    autoLoadSelectOptions: boolean | undefined;
    autoLoadSelectOptionsKey: string | undefined;
    setTagMode(l?: boolean): this;
    tags: boolean | undefined;
    setOptions(l?: any[]): this;
    setTitleSourceColumn(l: any): this;
    extractTitleFromColumn: any;
    useForRowKey(l?: boolean): this;
    isForRowKey: boolean | undefined;
    setIsEquivalentToSelectValue(l?: boolean): this;
    equivalentToSelectValue: boolean | undefined;
}
declare function wl(t: any, l: any, i: any, o?: boolean): {
    sortable: boolean;
    hidden: boolean;
    preferSlot: boolean;
    type: string;
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    resource: string;
    resourceData: {};
    isMultiple: boolean;
    multipleDisplay: string;
    multipleDisplayEdition: string;
    key: string | undefined;
    label: string | undefined;
    setIsSortable: (l?: boolean) => A;
    setIsEditable: (l?: boolean) => A;
    editable: boolean | undefined;
    setIsHidden: (l?: boolean) => A;
    setFormatter: (l?: undefined) => A;
    formatter: any;
    setEmptyChecker: (l?: undefined) => A;
    checkEmpty: any;
    setColSpan: (l?: undefined) => A;
    colspan: any;
    getHref: (l: any) => any;
    doAction: (l: any) => any;
    defineAsLink: (l: any) => A;
    link: any;
    defineAsText: () => A;
    defineAsEmail: () => A;
    defineAsTel: () => A;
    defineAsInteger: () => A;
    defineAsFloat: () => A;
    defineAsCheck: () => A;
    defineAsSwitch: () => A;
    defineAsFile: () => A;
    defineAsAction: (l: any) => A;
    action: any;
    defineAsSelect: (l: any) => A;
    options: any;
    setIsMultiple: (l?: boolean) => A;
    setResource: (l: any) => A;
    setResourceSlot: (l: any) => A;
    resourceSlot: any;
    setResourceData: (l: any) => A;
    setMultipleDisplay: (l: any) => A;
    setMultipleDisplayToList: () => A;
    setMultipleDisplayToInline: () => A;
    setMultipleDisplayToCount: () => A;
    setMultipleDisplayEdition: (l: any) => A;
    setMultipleDisplayEditionToList: () => A;
    setMultipleDisplayEditionToInline: () => A;
    setSlotData: (l: any) => A;
    slotData: any;
    setAutoLoadSelectOptions: (l?: boolean, i?: string) => A;
    autoLoadSelectOptions: boolean | undefined;
    autoLoadSelectOptionsKey: string | undefined;
    setTagMode: (l?: boolean) => A;
    tags: boolean | undefined;
    setOptions: (l?: any[]) => A;
    setTitleSourceColumn: (l: any) => A;
    extractTitleFromColumn: any;
    useForRowKey: (l?: boolean) => A;
    isForRowKey: boolean | undefined;
    setIsEquivalentToSelectValue: (l?: boolean) => A;
    equivalentToSelectValue: boolean | undefined;
};
declare function Al(t: any, l: any, i?: boolean): {
    sortable: boolean;
    hidden: boolean;
    preferSlot: boolean;
    type: string;
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    resource: string;
    resourceData: {};
    isMultiple: boolean;
    multipleDisplay: string;
    multipleDisplayEdition: string;
    key: string | undefined;
    label: string | undefined;
    setIsSortable: (l?: boolean) => A;
    setIsEditable: (l?: boolean) => A;
    editable: boolean | undefined;
    setIsHidden: (l?: boolean) => A;
    setFormatter: (l?: undefined) => A;
    formatter: any;
    setEmptyChecker: (l?: undefined) => A;
    checkEmpty: any;
    setColSpan: (l?: undefined) => A;
    colspan: any;
    getHref: (l: any) => any;
    doAction: (l: any) => any;
    defineAsLink: (l: any) => A;
    link: any;
    defineAsText: () => A;
    defineAsEmail: () => A;
    defineAsTel: () => A;
    defineAsInteger: () => A;
    defineAsFloat: () => A;
    defineAsCheck: () => A;
    defineAsSwitch: () => A;
    defineAsFile: () => A;
    defineAsAction: (l: any) => A;
    action: any;
    defineAsSelect: (l: any) => A;
    options: any;
    setIsMultiple: (l?: boolean) => A;
    setResource: (l: any) => A;
    setResourceSlot: (l: any) => A;
    resourceSlot: any;
    setResourceData: (l: any) => A;
    setMultipleDisplay: (l: any) => A;
    setMultipleDisplayToList: () => A;
    setMultipleDisplayToInline: () => A;
    setMultipleDisplayToCount: () => A;
    setMultipleDisplayEdition: (l: any) => A;
    setMultipleDisplayEditionToList: () => A;
    setMultipleDisplayEditionToInline: () => A;
    setSlotData: (l: any) => A;
    slotData: any;
    setAutoLoadSelectOptions: (l?: boolean, i?: string) => A;
    autoLoadSelectOptions: boolean | undefined;
    autoLoadSelectOptionsKey: string | undefined;
    setTagMode: (l?: boolean) => A;
    tags: boolean | undefined;
    setOptions: (l?: any[]) => A;
    setTitleSourceColumn: (l: any) => A;
    extractTitleFromColumn: any;
    useForRowKey: (l?: boolean) => A;
    isForRowKey: boolean | undefined;
    setIsEquivalentToSelectValue: (l?: boolean) => A;
    equivalentToSelectValue: boolean | undefined;
};
declare function Dl(t: any, l: any, i?: boolean): {
    sortable: boolean;
    hidden: boolean;
    preferSlot: boolean;
    type: string;
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    resource: string;
    resourceData: {};
    isMultiple: boolean;
    multipleDisplay: string;
    multipleDisplayEdition: string;
    key: string | undefined;
    label: string | undefined;
    setIsSortable: (l?: boolean) => A;
    setIsEditable: (l?: boolean) => A;
    editable: boolean | undefined;
    setIsHidden: (l?: boolean) => A;
    setFormatter: (l?: undefined) => A;
    formatter: any;
    setEmptyChecker: (l?: undefined) => A;
    checkEmpty: any;
    setColSpan: (l?: undefined) => A;
    colspan: any;
    getHref: (l: any) => any;
    doAction: (l: any) => any;
    defineAsLink: (l: any) => A;
    link: any;
    defineAsText: () => A;
    defineAsEmail: () => A;
    defineAsTel: () => A;
    defineAsInteger: () => A;
    defineAsFloat: () => A;
    defineAsCheck: () => A;
    defineAsSwitch: () => A;
    defineAsFile: () => A;
    defineAsAction: (l: any) => A;
    action: any;
    defineAsSelect: (l: any) => A;
    options: any;
    setIsMultiple: (l?: boolean) => A;
    setResource: (l: any) => A;
    setResourceSlot: (l: any) => A;
    resourceSlot: any;
    setResourceData: (l: any) => A;
    setMultipleDisplay: (l: any) => A;
    setMultipleDisplayToList: () => A;
    setMultipleDisplayToInline: () => A;
    setMultipleDisplayToCount: () => A;
    setMultipleDisplayEdition: (l: any) => A;
    setMultipleDisplayEditionToList: () => A;
    setMultipleDisplayEditionToInline: () => A;
    setSlotData: (l: any) => A;
    slotData: any;
    setAutoLoadSelectOptions: (l?: boolean, i?: string) => A;
    autoLoadSelectOptions: boolean | undefined;
    autoLoadSelectOptionsKey: string | undefined;
    setTagMode: (l?: boolean) => A;
    tags: boolean | undefined;
    setOptions: (l?: any[]) => A;
    setTitleSourceColumn: (l: any) => A;
    extractTitleFromColumn: any;
    useForRowKey: (l?: boolean) => A;
    isForRowKey: boolean | undefined;
    setIsEquivalentToSelectValue: (l?: boolean) => A;
    equivalentToSelectValue: boolean | undefined;
};
declare function Rl(t: any, l: any, i?: boolean): {
    sortable: boolean;
    hidden: boolean;
    preferSlot: boolean;
    type: string;
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    resource: string;
    resourceData: {};
    isMultiple: boolean;
    multipleDisplay: string;
    multipleDisplayEdition: string;
    key: string | undefined;
    label: string | undefined;
    setIsSortable: (l?: boolean) => A;
    setIsEditable: (l?: boolean) => A;
    editable: boolean | undefined;
    setIsHidden: (l?: boolean) => A;
    setFormatter: (l?: undefined) => A;
    formatter: any;
    setEmptyChecker: (l?: undefined) => A;
    checkEmpty: any;
    setColSpan: (l?: undefined) => A;
    colspan: any;
    getHref: (l: any) => any;
    doAction: (l: any) => any;
    defineAsLink: (l: any) => A;
    link: any;
    defineAsText: () => A;
    defineAsEmail: () => A;
    defineAsTel: () => A;
    defineAsInteger: () => A;
    defineAsFloat: () => A;
    defineAsCheck: () => A;
    defineAsSwitch: () => A;
    defineAsFile: () => A;
    defineAsAction: (l: any) => A;
    action: any;
    defineAsSelect: (l: any) => A;
    options: any;
    setIsMultiple: (l?: boolean) => A;
    setResource: (l: any) => A;
    setResourceSlot: (l: any) => A;
    resourceSlot: any;
    setResourceData: (l: any) => A;
    setMultipleDisplay: (l: any) => A;
    setMultipleDisplayToList: () => A;
    setMultipleDisplayToInline: () => A;
    setMultipleDisplayToCount: () => A;
    setMultipleDisplayEdition: (l: any) => A;
    setMultipleDisplayEditionToList: () => A;
    setMultipleDisplayEditionToInline: () => A;
    setSlotData: (l: any) => A;
    slotData: any;
    setAutoLoadSelectOptions: (l?: boolean, i?: string) => A;
    autoLoadSelectOptions: boolean | undefined;
    autoLoadSelectOptionsKey: string | undefined;
    setTagMode: (l?: boolean) => A;
    tags: boolean | undefined;
    setOptions: (l?: any[]) => A;
    setTitleSourceColumn: (l: any) => A;
    extractTitleFromColumn: any;
    useForRowKey: (l?: boolean) => A;
    isForRowKey: boolean | undefined;
    setIsEquivalentToSelectValue: (l?: boolean) => A;
    equivalentToSelectValue: boolean | undefined;
};
declare function Nl(t: any, l: any, i?: boolean): {
    sortable: boolean;
    hidden: boolean;
    preferSlot: boolean;
    type: string;
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    resource: string;
    resourceData: {};
    isMultiple: boolean;
    multipleDisplay: string;
    multipleDisplayEdition: string;
    key: string | undefined;
    label: string | undefined;
    setIsSortable: (l?: boolean) => A;
    setIsEditable: (l?: boolean) => A;
    editable: boolean | undefined;
    setIsHidden: (l?: boolean) => A;
    setFormatter: (l?: undefined) => A;
    formatter: any;
    setEmptyChecker: (l?: undefined) => A;
    checkEmpty: any;
    setColSpan: (l?: undefined) => A;
    colspan: any;
    getHref: (l: any) => any;
    doAction: (l: any) => any;
    defineAsLink: (l: any) => A;
    link: any;
    defineAsText: () => A;
    defineAsEmail: () => A;
    defineAsTel: () => A;
    defineAsInteger: () => A;
    defineAsFloat: () => A;
    defineAsCheck: () => A;
    defineAsSwitch: () => A;
    defineAsFile: () => A;
    defineAsAction: (l: any) => A;
    action: any;
    defineAsSelect: (l: any) => A;
    options: any;
    setIsMultiple: (l?: boolean) => A;
    setResource: (l: any) => A;
    setResourceSlot: (l: any) => A;
    resourceSlot: any;
    setResourceData: (l: any) => A;
    setMultipleDisplay: (l: any) => A;
    setMultipleDisplayToList: () => A;
    setMultipleDisplayToInline: () => A;
    setMultipleDisplayToCount: () => A;
    setMultipleDisplayEdition: (l: any) => A;
    setMultipleDisplayEditionToList: () => A;
    setMultipleDisplayEditionToInline: () => A;
    setSlotData: (l: any) => A;
    slotData: any;
    setAutoLoadSelectOptions: (l?: boolean, i?: string) => A;
    autoLoadSelectOptions: boolean | undefined;
    autoLoadSelectOptionsKey: string | undefined;
    setTagMode: (l?: boolean) => A;
    tags: boolean | undefined;
    setOptions: (l?: any[]) => A;
    setTitleSourceColumn: (l: any) => A;
    extractTitleFromColumn: any;
    useForRowKey: (l?: boolean) => A;
    isForRowKey: boolean | undefined;
    setIsEquivalentToSelectValue: (l?: boolean) => A;
    equivalentToSelectValue: boolean | undefined;
};
declare function Ml(t: any, l: any, i?: boolean): {
    sortable: boolean;
    hidden: boolean;
    preferSlot: boolean;
    type: string;
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    resource: string;
    resourceData: {};
    isMultiple: boolean;
    multipleDisplay: string;
    multipleDisplayEdition: string;
    key: string | undefined;
    label: string | undefined;
    setIsSortable: (l?: boolean) => A;
    setIsEditable: (l?: boolean) => A;
    editable: boolean | undefined;
    setIsHidden: (l?: boolean) => A;
    setFormatter: (l?: undefined) => A;
    formatter: any;
    setEmptyChecker: (l?: undefined) => A;
    checkEmpty: any;
    setColSpan: (l?: undefined) => A;
    colspan: any;
    getHref: (l: any) => any;
    doAction: (l: any) => any;
    defineAsLink: (l: any) => A;
    link: any;
    defineAsText: () => A;
    defineAsEmail: () => A;
    defineAsTel: () => A;
    defineAsInteger: () => A;
    defineAsFloat: () => A;
    defineAsCheck: () => A;
    defineAsSwitch: () => A;
    defineAsFile: () => A;
    defineAsAction: (l: any) => A;
    action: any;
    defineAsSelect: (l: any) => A;
    options: any;
    setIsMultiple: (l?: boolean) => A;
    setResource: (l: any) => A;
    setResourceSlot: (l: any) => A;
    resourceSlot: any;
    setResourceData: (l: any) => A;
    setMultipleDisplay: (l: any) => A;
    setMultipleDisplayToList: () => A;
    setMultipleDisplayToInline: () => A;
    setMultipleDisplayToCount: () => A;
    setMultipleDisplayEdition: (l: any) => A;
    setMultipleDisplayEditionToList: () => A;
    setMultipleDisplayEditionToInline: () => A;
    setSlotData: (l: any) => A;
    slotData: any;
    setAutoLoadSelectOptions: (l?: boolean, i?: string) => A;
    autoLoadSelectOptions: boolean | undefined;
    autoLoadSelectOptionsKey: string | undefined;
    setTagMode: (l?: boolean) => A;
    tags: boolean | undefined;
    setOptions: (l?: any[]) => A;
    setTitleSourceColumn: (l: any) => A;
    extractTitleFromColumn: any;
    useForRowKey: (l?: boolean) => A;
    isForRowKey: boolean | undefined;
    setIsEquivalentToSelectValue: (l?: boolean) => A;
    equivalentToSelectValue: boolean | undefined;
};
declare function Ul(t: any, l: any, i?: boolean): {
    sortable: boolean;
    hidden: boolean;
    preferSlot: boolean;
    type: string;
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    resource: string;
    resourceData: {};
    isMultiple: boolean;
    multipleDisplay: string;
    multipleDisplayEdition: string;
    key: string | undefined;
    label: string | undefined;
    setIsSortable: (l?: boolean) => A;
    setIsEditable: (l?: boolean) => A;
    editable: boolean | undefined;
    setIsHidden: (l?: boolean) => A;
    setFormatter: (l?: undefined) => A;
    formatter: any;
    setEmptyChecker: (l?: undefined) => A;
    checkEmpty: any;
    setColSpan: (l?: undefined) => A;
    colspan: any;
    getHref: (l: any) => any;
    doAction: (l: any) => any;
    defineAsLink: (l: any) => A;
    link: any;
    defineAsText: () => A;
    defineAsEmail: () => A;
    defineAsTel: () => A;
    defineAsInteger: () => A;
    defineAsFloat: () => A;
    defineAsCheck: () => A;
    defineAsSwitch: () => A;
    defineAsFile: () => A;
    defineAsAction: (l: any) => A;
    action: any;
    defineAsSelect: (l: any) => A;
    options: any;
    setIsMultiple: (l?: boolean) => A;
    setResource: (l: any) => A;
    setResourceSlot: (l: any) => A;
    resourceSlot: any;
    setResourceData: (l: any) => A;
    setMultipleDisplay: (l: any) => A;
    setMultipleDisplayToList: () => A;
    setMultipleDisplayToInline: () => A;
    setMultipleDisplayToCount: () => A;
    setMultipleDisplayEdition: (l: any) => A;
    setMultipleDisplayEditionToList: () => A;
    setMultipleDisplayEditionToInline: () => A;
    setSlotData: (l: any) => A;
    slotData: any;
    setAutoLoadSelectOptions: (l?: boolean, i?: string) => A;
    autoLoadSelectOptions: boolean | undefined;
    autoLoadSelectOptionsKey: string | undefined;
    setTagMode: (l?: boolean) => A;
    tags: boolean | undefined;
    setOptions: (l?: any[]) => A;
    setTitleSourceColumn: (l: any) => A;
    extractTitleFromColumn: any;
    useForRowKey: (l?: boolean) => A;
    isForRowKey: boolean | undefined;
    setIsEquivalentToSelectValue: (l?: boolean) => A;
    equivalentToSelectValue: boolean | undefined;
};
declare function Tl(t: any, l: any, i?: boolean): {
    sortable: boolean;
    hidden: boolean;
    preferSlot: boolean;
    type: string;
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    resource: string;
    resourceData: {};
    isMultiple: boolean;
    multipleDisplay: string;
    multipleDisplayEdition: string;
    key: string | undefined;
    label: string | undefined;
    setIsSortable: (l?: boolean) => A;
    setIsEditable: (l?: boolean) => A;
    editable: boolean | undefined;
    setIsHidden: (l?: boolean) => A;
    setFormatter: (l?: undefined) => A;
    formatter: any;
    setEmptyChecker: (l?: undefined) => A;
    checkEmpty: any;
    setColSpan: (l?: undefined) => A;
    colspan: any;
    getHref: (l: any) => any;
    doAction: (l: any) => any;
    defineAsLink: (l: any) => A;
    link: any;
    defineAsText: () => A;
    defineAsEmail: () => A;
    defineAsTel: () => A;
    defineAsInteger: () => A;
    defineAsFloat: () => A;
    defineAsCheck: () => A;
    defineAsSwitch: () => A;
    defineAsFile: () => A;
    defineAsAction: (l: any) => A;
    action: any;
    defineAsSelect: (l: any) => A;
    options: any;
    setIsMultiple: (l?: boolean) => A;
    setResource: (l: any) => A;
    setResourceSlot: (l: any) => A;
    resourceSlot: any;
    setResourceData: (l: any) => A;
    setMultipleDisplay: (l: any) => A;
    setMultipleDisplayToList: () => A;
    setMultipleDisplayToInline: () => A;
    setMultipleDisplayToCount: () => A;
    setMultipleDisplayEdition: (l: any) => A;
    setMultipleDisplayEditionToList: () => A;
    setMultipleDisplayEditionToInline: () => A;
    setSlotData: (l: any) => A;
    slotData: any;
    setAutoLoadSelectOptions: (l?: boolean, i?: string) => A;
    autoLoadSelectOptions: boolean | undefined;
    autoLoadSelectOptionsKey: string | undefined;
    setTagMode: (l?: boolean) => A;
    tags: boolean | undefined;
    setOptions: (l?: any[]) => A;
    setTitleSourceColumn: (l: any) => A;
    extractTitleFromColumn: any;
    useForRowKey: (l?: boolean) => A;
    isForRowKey: boolean | undefined;
    setIsEquivalentToSelectValue: (l?: boolean) => A;
    equivalentToSelectValue: boolean | undefined;
};
declare function El(t: any, l: any, i: any, o?: boolean): {
    sortable: boolean;
    hidden: boolean;
    preferSlot: boolean;
    type: string;
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    resource: string;
    resourceData: {};
    isMultiple: boolean;
    multipleDisplay: string;
    multipleDisplayEdition: string;
    key: string | undefined;
    label: string | undefined;
    setIsSortable: (l?: boolean) => A;
    setIsEditable: (l?: boolean) => A;
    editable: boolean | undefined;
    setIsHidden: (l?: boolean) => A;
    setFormatter: (l?: undefined) => A;
    formatter: any;
    setEmptyChecker: (l?: undefined) => A;
    checkEmpty: any;
    setColSpan: (l?: undefined) => A;
    colspan: any;
    getHref: (l: any) => any;
    doAction: (l: any) => any;
    defineAsLink: (l: any) => A;
    link: any;
    defineAsText: () => A;
    defineAsEmail: () => A;
    defineAsTel: () => A;
    defineAsInteger: () => A;
    defineAsFloat: () => A;
    defineAsCheck: () => A;
    defineAsSwitch: () => A;
    defineAsFile: () => A;
    defineAsAction: (l: any) => A;
    action: any;
    defineAsSelect: (l: any) => A;
    options: any;
    setIsMultiple: (l?: boolean) => A;
    setResource: (l: any) => A;
    setResourceSlot: (l: any) => A;
    resourceSlot: any;
    setResourceData: (l: any) => A;
    setMultipleDisplay: (l: any) => A;
    setMultipleDisplayToList: () => A;
    setMultipleDisplayToInline: () => A;
    setMultipleDisplayToCount: () => A;
    setMultipleDisplayEdition: (l: any) => A;
    setMultipleDisplayEditionToList: () => A;
    setMultipleDisplayEditionToInline: () => A;
    setSlotData: (l: any) => A;
    slotData: any;
    setAutoLoadSelectOptions: (l?: boolean, i?: string) => A;
    autoLoadSelectOptions: boolean | undefined;
    autoLoadSelectOptionsKey: string | undefined;
    setTagMode: (l?: boolean) => A;
    tags: boolean | undefined;
    setOptions: (l?: any[]) => A;
    setTitleSourceColumn: (l: any) => A;
    extractTitleFromColumn: any;
    useForRowKey: (l?: boolean) => A;
    isForRowKey: boolean | undefined;
    setIsEquivalentToSelectValue: (l?: boolean) => A;
    equivalentToSelectValue: boolean | undefined;
};
declare function Fl(t: any, l: any, i: any, o?: boolean): {
    sortable: boolean;
    hidden: boolean;
    preferSlot: boolean;
    type: string;
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    resource: string;
    resourceData: {};
    isMultiple: boolean;
    multipleDisplay: string;
    multipleDisplayEdition: string;
    key: string | undefined;
    label: string | undefined;
    setIsSortable: (l?: boolean) => A;
    setIsEditable: (l?: boolean) => A;
    editable: boolean | undefined;
    setIsHidden: (l?: boolean) => A;
    setFormatter: (l?: undefined) => A;
    formatter: any;
    setEmptyChecker: (l?: undefined) => A;
    checkEmpty: any;
    setColSpan: (l?: undefined) => A;
    colspan: any;
    getHref: (l: any) => any;
    doAction: (l: any) => any;
    defineAsLink: (l: any) => A;
    link: any;
    defineAsText: () => A;
    defineAsEmail: () => A;
    defineAsTel: () => A;
    defineAsInteger: () => A;
    defineAsFloat: () => A;
    defineAsCheck: () => A;
    defineAsSwitch: () => A;
    defineAsFile: () => A;
    defineAsAction: (l: any) => A;
    action: any;
    defineAsSelect: (l: any) => A;
    options: any;
    setIsMultiple: (l?: boolean) => A;
    setResource: (l: any) => A;
    setResourceSlot: (l: any) => A;
    resourceSlot: any;
    setResourceData: (l: any) => A;
    setMultipleDisplay: (l: any) => A;
    setMultipleDisplayToList: () => A;
    setMultipleDisplayToInline: () => A;
    setMultipleDisplayToCount: () => A;
    setMultipleDisplayEdition: (l: any) => A;
    setMultipleDisplayEditionToList: () => A;
    setMultipleDisplayEditionToInline: () => A;
    setSlotData: (l: any) => A;
    slotData: any;
    setAutoLoadSelectOptions: (l?: boolean, i?: string) => A;
    autoLoadSelectOptions: boolean | undefined;
    autoLoadSelectOptionsKey: string | undefined;
    setTagMode: (l?: boolean) => A;
    tags: boolean | undefined;
    setOptions: (l?: any[]) => A;
    setTitleSourceColumn: (l: any) => A;
    extractTitleFromColumn: any;
    useForRowKey: (l?: boolean) => A;
    isForRowKey: boolean | undefined;
    setIsEquivalentToSelectValue: (l?: boolean) => A;
    equivalentToSelectValue: boolean | undefined;
};
declare function Ll(t: any, l: any, i?: boolean): {
    sortable: boolean;
    hidden: boolean;
    preferSlot: boolean;
    type: string;
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    resource: string;
    resourceData: {};
    isMultiple: boolean;
    multipleDisplay: string;
    multipleDisplayEdition: string;
    key: string | undefined;
    label: string | undefined;
    setIsSortable: (l?: boolean) => A;
    setIsEditable: (l?: boolean) => A;
    editable: boolean | undefined;
    setIsHidden: (l?: boolean) => A;
    setFormatter: (l?: undefined) => A;
    formatter: any;
    setEmptyChecker: (l?: undefined) => A;
    checkEmpty: any;
    setColSpan: (l?: undefined) => A;
    colspan: any;
    getHref: (l: any) => any;
    doAction: (l: any) => any;
    defineAsLink: (l: any) => A;
    link: any;
    defineAsText: () => A;
    defineAsEmail: () => A;
    defineAsTel: () => A;
    defineAsInteger: () => A;
    defineAsFloat: () => A;
    defineAsCheck: () => A;
    defineAsSwitch: () => A;
    defineAsFile: () => A;
    defineAsAction: (l: any) => A;
    action: any;
    defineAsSelect: (l: any) => A;
    options: any;
    setIsMultiple: (l?: boolean) => A;
    setResource: (l: any) => A;
    setResourceSlot: (l: any) => A;
    resourceSlot: any;
    setResourceData: (l: any) => A;
    setMultipleDisplay: (l: any) => A;
    setMultipleDisplayToList: () => A;
    setMultipleDisplayToInline: () => A;
    setMultipleDisplayToCount: () => A;
    setMultipleDisplayEdition: (l: any) => A;
    setMultipleDisplayEditionToList: () => A;
    setMultipleDisplayEditionToInline: () => A;
    setSlotData: (l: any) => A;
    slotData: any;
    setAutoLoadSelectOptions: (l?: boolean, i?: string) => A;
    autoLoadSelectOptions: boolean | undefined;
    autoLoadSelectOptionsKey: string | undefined;
    setTagMode: (l?: boolean) => A;
    tags: boolean | undefined;
    setOptions: (l?: any[]) => A;
    setTitleSourceColumn: (l: any) => A;
    extractTitleFromColumn: any;
    useForRowKey: (l?: boolean) => A;
    isForRowKey: boolean | undefined;
    setIsEquivalentToSelectValue: (l?: boolean) => A;
    equivalentToSelectValue: boolean | undefined;
};
declare function $l(t: any, l: any, i?: boolean): {
    sortable: boolean;
    hidden: boolean;
    preferSlot: boolean;
    type: string;
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    resource: string;
    resourceData: {};
    isMultiple: boolean;
    multipleDisplay: string;
    multipleDisplayEdition: string;
    key: string | undefined;
    label: string | undefined;
    setIsSortable: (l?: boolean) => A;
    setIsEditable: (l?: boolean) => A;
    editable: boolean | undefined;
    setIsHidden: (l?: boolean) => A;
    setFormatter: (l?: undefined) => A;
    formatter: any;
    setEmptyChecker: (l?: undefined) => A;
    checkEmpty: any;
    setColSpan: (l?: undefined) => A;
    colspan: any;
    getHref: (l: any) => any;
    doAction: (l: any) => any;
    defineAsLink: (l: any) => A;
    link: any;
    defineAsText: () => A;
    defineAsEmail: () => A;
    defineAsTel: () => A;
    defineAsInteger: () => A;
    defineAsFloat: () => A;
    defineAsCheck: () => A;
    defineAsSwitch: () => A;
    defineAsFile: () => A;
    defineAsAction: (l: any) => A;
    action: any;
    defineAsSelect: (l: any) => A;
    options: any;
    setIsMultiple: (l?: boolean) => A;
    setResource: (l: any) => A;
    setResourceSlot: (l: any) => A;
    resourceSlot: any;
    setResourceData: (l: any) => A;
    setMultipleDisplay: (l: any) => A;
    setMultipleDisplayToList: () => A;
    setMultipleDisplayToInline: () => A;
    setMultipleDisplayToCount: () => A;
    setMultipleDisplayEdition: (l: any) => A;
    setMultipleDisplayEditionToList: () => A;
    setMultipleDisplayEditionToInline: () => A;
    setSlotData: (l: any) => A;
    slotData: any;
    setAutoLoadSelectOptions: (l?: boolean, i?: string) => A;
    autoLoadSelectOptions: boolean | undefined;
    autoLoadSelectOptionsKey: string | undefined;
    setTagMode: (l?: boolean) => A;
    tags: boolean | undefined;
    setOptions: (l?: any[]) => A;
    setTitleSourceColumn: (l: any) => A;
    extractTitleFromColumn: any;
    useForRowKey: (l?: boolean) => A;
    isForRowKey: boolean | undefined;
    setIsEquivalentToSelectValue: (l?: boolean) => A;
    equivalentToSelectValue: boolean | undefined;
};
declare function Vl(t: any, l: any, i?: boolean): {
    sortable: boolean;
    hidden: boolean;
    preferSlot: boolean;
    type: string;
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    resource: string;
    resourceData: {};
    isMultiple: boolean;
    multipleDisplay: string;
    multipleDisplayEdition: string;
    key: string | undefined;
    label: string | undefined;
    setIsSortable: (l?: boolean) => A;
    setIsEditable: (l?: boolean) => A;
    editable: boolean | undefined;
    setIsHidden: (l?: boolean) => A;
    setFormatter: (l?: undefined) => A;
    formatter: any;
    setEmptyChecker: (l?: undefined) => A;
    checkEmpty: any;
    setColSpan: (l?: undefined) => A;
    colspan: any;
    getHref: (l: any) => any;
    doAction: (l: any) => any;
    defineAsLink: (l: any) => A;
    link: any;
    defineAsText: () => A;
    defineAsEmail: () => A;
    defineAsTel: () => A;
    defineAsInteger: () => A;
    defineAsFloat: () => A;
    defineAsCheck: () => A;
    defineAsSwitch: () => A;
    defineAsFile: () => A;
    defineAsAction: (l: any) => A;
    action: any;
    defineAsSelect: (l: any) => A;
    options: any;
    setIsMultiple: (l?: boolean) => A;
    setResource: (l: any) => A;
    setResourceSlot: (l: any) => A;
    resourceSlot: any;
    setResourceData: (l: any) => A;
    setMultipleDisplay: (l: any) => A;
    setMultipleDisplayToList: () => A;
    setMultipleDisplayToInline: () => A;
    setMultipleDisplayToCount: () => A;
    setMultipleDisplayEdition: (l: any) => A;
    setMultipleDisplayEditionToList: () => A;
    setMultipleDisplayEditionToInline: () => A;
    setSlotData: (l: any) => A;
    slotData: any;
    setAutoLoadSelectOptions: (l?: boolean, i?: string) => A;
    autoLoadSelectOptions: boolean | undefined;
    autoLoadSelectOptionsKey: string | undefined;
    setTagMode: (l?: boolean) => A;
    tags: boolean | undefined;
    setOptions: (l?: any[]) => A;
    setTitleSourceColumn: (l: any) => A;
    extractTitleFromColumn: any;
    useForRowKey: (l?: boolean) => A;
    isForRowKey: boolean | undefined;
    setIsEquivalentToSelectValue: (l?: boolean) => A;
    equivalentToSelectValue: boolean | undefined;
};
declare namespace Kl {
    function install(t: any): void;
}
declare function Wl(t: any): boolean;
declare function Hl(t: any): boolean;
declare function ql(t: any): void;
declare function Pl(t: any): boolean;
import { Field as Ke } from "lkt-field";
export { A as LktTableColumn, wl as createActionColumn, Al as createCheckColumn, Dl as createColumn, Rl as createEmailColumn, Nl as createFileColumn, Ml as createFloatColumn, Ul as createHiddenColumn, Tl as createIntegerColumn, El as createLinkColumn, Fl as createSelectColumn, Ll as createSwitchColumn, $l as createTelColumn, Vl as createTextColumn, Kl as default, Wl as setTableCreateButtonSlot, Hl as setTableDropButtonSlot, ql as setTableEmptySlot, Pl as setTableNavButtonSlot };
