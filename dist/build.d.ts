declare class F {
    constructor(r?: {});
    key: string;
    label: string;
    sortable: boolean;
    hidden: boolean;
    editable: boolean;
    preferSlot: boolean;
    type: string;
    link: string;
    isForRowKey: boolean;
    extractTitleFromColumn: string;
    slotData: {};
    field: Oe;
    getHref(r: any): any;
    doAction(r: any): any;
}
declare function Ll(t: any, r: any, i: any, a?: boolean): {
    key: string;
    label: string;
    sortable: boolean;
    hidden: boolean;
    editable: boolean;
    preferSlot: boolean;
    type: string;
    link: string;
    isForRowKey: boolean;
    extractTitleFromColumn: string;
    slotData: {};
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    getHref: (r: any) => any;
    doAction: (r: any) => any;
};
declare function Wl(t: any, r: any, i?: boolean): {
    key: string;
    label: string;
    sortable: boolean;
    hidden: boolean;
    editable: boolean;
    preferSlot: boolean;
    type: string;
    link: string;
    isForRowKey: boolean;
    extractTitleFromColumn: string;
    slotData: {};
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    getHref: (r: any) => any;
    doAction: (r: any) => any;
};
declare function $l(t: any): {
    key: string;
    label: string;
    sortable: boolean;
    hidden: boolean;
    editable: boolean;
    preferSlot: boolean;
    type: string;
    link: string;
    isForRowKey: boolean;
    extractTitleFromColumn: string;
    slotData: {};
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    getHref: (r: any) => any;
    doAction: (r: any) => any;
};
declare function Ul(t: any, r: any, i?: boolean): {
    key: string;
    label: string;
    sortable: boolean;
    hidden: boolean;
    editable: boolean;
    preferSlot: boolean;
    type: string;
    link: string;
    isForRowKey: boolean;
    extractTitleFromColumn: string;
    slotData: {};
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    getHref: (r: any) => any;
    doAction: (r: any) => any;
};
declare function Pl(t: any, r: any, i?: boolean): {
    key: string;
    label: string;
    sortable: boolean;
    hidden: boolean;
    editable: boolean;
    preferSlot: boolean;
    type: string;
    link: string;
    isForRowKey: boolean;
    extractTitleFromColumn: string;
    slotData: {};
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    getHref: (r: any) => any;
    doAction: (r: any) => any;
};
declare function Nl(t: any, r: any, i?: boolean): {
    key: string;
    label: string;
    sortable: boolean;
    hidden: boolean;
    editable: boolean;
    preferSlot: boolean;
    type: string;
    link: string;
    isForRowKey: boolean;
    extractTitleFromColumn: string;
    slotData: {};
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    getHref: (r: any) => any;
    doAction: (r: any) => any;
};
declare function ql(t: any, r: any, i?: boolean): {
    key: string;
    label: string;
    sortable: boolean;
    hidden: boolean;
    editable: boolean;
    preferSlot: boolean;
    type: string;
    link: string;
    isForRowKey: boolean;
    extractTitleFromColumn: string;
    slotData: {};
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    getHref: (r: any) => any;
    doAction: (r: any) => any;
};
declare function Fl(t: any, r: any, i?: boolean): {
    key: string;
    label: string;
    sortable: boolean;
    hidden: boolean;
    editable: boolean;
    preferSlot: boolean;
    type: string;
    link: string;
    isForRowKey: boolean;
    extractTitleFromColumn: string;
    slotData: {};
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    getHref: (r: any) => any;
    doAction: (r: any) => any;
};
declare function Rl(t: any, r: any, i: any, a?: boolean): {
    key: string;
    label: string;
    sortable: boolean;
    hidden: boolean;
    editable: boolean;
    preferSlot: boolean;
    type: string;
    link: string;
    isForRowKey: boolean;
    extractTitleFromColumn: string;
    slotData: {};
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    getHref: (r: any) => any;
    doAction: (r: any) => any;
};
declare function Kl(t: any, r: any, i: any, a?: boolean): {
    key: string;
    label: string;
    sortable: boolean;
    hidden: boolean;
    editable: boolean;
    preferSlot: boolean;
    type: string;
    link: string;
    isForRowKey: boolean;
    extractTitleFromColumn: string;
    slotData: {};
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    getHref: (r: any) => any;
    doAction: (r: any) => any;
};
declare function Hl(t: any, r: any, i?: boolean): {
    key: string;
    label: string;
    sortable: boolean;
    hidden: boolean;
    editable: boolean;
    preferSlot: boolean;
    type: string;
    link: string;
    isForRowKey: boolean;
    extractTitleFromColumn: string;
    slotData: {};
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    getHref: (r: any) => any;
    doAction: (r: any) => any;
};
declare function Al(t: any, r: any, i?: boolean): {
    key: string;
    label: string;
    sortable: boolean;
    hidden: boolean;
    editable: boolean;
    preferSlot: boolean;
    type: string;
    link: string;
    isForRowKey: boolean;
    extractTitleFromColumn: string;
    slotData: {};
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    getHref: (r: any) => any;
    doAction: (r: any) => any;
};
declare function Ml(t: any, r: any, i?: boolean): {
    key: string;
    label: string;
    sortable: boolean;
    hidden: boolean;
    editable: boolean;
    preferSlot: boolean;
    type: string;
    link: string;
    isForRowKey: boolean;
    extractTitleFromColumn: string;
    slotData: {};
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    getHref: (r: any) => any;
    doAction: (r: any) => any;
};
declare namespace jl {
    function install(t: any): void;
}
declare function Jl(t: any): boolean;
declare function Gl(t: any): boolean;
declare function Ol(t: any): void;
declare function zl(t: any): boolean;
declare function Ql(t: any): void;
import { Field as Oe } from "lkt-field";
export { F as Column, Ll as createActionColumn, Wl as createCheckColumn, $l as createColumn, Ul as createEmailColumn, Pl as createFileColumn, Nl as createFloatColumn, ql as createHiddenColumn, Fl as createIntegerColumn, Rl as createLinkColumn, Kl as createSelectColumn, Hl as createSwitchColumn, Al as createTelColumn, Ml as createTextColumn, jl as default, Jl as setTableCreateButtonSlot, Gl as setTableDropButtonSlot, Ol as setTableEmptySlot, zl as setTableNavButtonSlot, Ql as setTableSaveIcon };
