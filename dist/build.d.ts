declare class M {
    constructor(u?: {});
    key: string;
    label: string;
    sortable: boolean;
    hidden: boolean;
    editable: boolean;
    preferSlot: boolean;
    type: string;
    link: string;
    isForRowKey: boolean;
    extractTitleFromColumn: string;
    slotData: {};
    field: Ae;
    getHref(u: any): any;
    doAction(u: any): any;
}
declare function gl(t: any, u: any, i: any, a?: boolean): {
    key: string;
    label: string;
    sortable: boolean;
    hidden: boolean;
    editable: boolean;
    preferSlot: boolean;
    type: string;
    link: string;
    isForRowKey: boolean;
    extractTitleFromColumn: string;
    slotData: {};
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    getHref: (u: any) => any;
    doAction: (u: any) => any;
};
declare function Vl(t: any, u: any, i?: boolean): {
    key: string;
    label: string;
    sortable: boolean;
    hidden: boolean;
    editable: boolean;
    preferSlot: boolean;
    type: string;
    link: string;
    isForRowKey: boolean;
    extractTitleFromColumn: string;
    slotData: {};
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    getHref: (u: any) => any;
    doAction: (u: any) => any;
};
declare function bl(t: any): {
    key: string;
    label: string;
    sortable: boolean;
    hidden: boolean;
    editable: boolean;
    preferSlot: boolean;
    type: string;
    link: string;
    isForRowKey: boolean;
    extractTitleFromColumn: string;
    slotData: {};
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    getHref: (u: any) => any;
    doAction: (u: any) => any;
};
declare function wl(t: any, u: any, i?: boolean): {
    key: string;
    label: string;
    sortable: boolean;
    hidden: boolean;
    editable: boolean;
    preferSlot: boolean;
    type: string;
    link: string;
    isForRowKey: boolean;
    extractTitleFromColumn: string;
    slotData: {};
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    getHref: (u: any) => any;
    doAction: (u: any) => any;
};
declare function Il(t: any, u: any, i?: boolean): {
    key: string;
    label: string;
    sortable: boolean;
    hidden: boolean;
    editable: boolean;
    preferSlot: boolean;
    type: string;
    link: string;
    isForRowKey: boolean;
    extractTitleFromColumn: string;
    slotData: {};
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    getHref: (u: any) => any;
    doAction: (u: any) => any;
};
declare function Bl(t: any, u: any, i?: boolean): {
    key: string;
    label: string;
    sortable: boolean;
    hidden: boolean;
    editable: boolean;
    preferSlot: boolean;
    type: string;
    link: string;
    isForRowKey: boolean;
    extractTitleFromColumn: string;
    slotData: {};
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    getHref: (u: any) => any;
    doAction: (u: any) => any;
};
declare function $l(t: any, u: any, i?: boolean): {
    key: string;
    label: string;
    sortable: boolean;
    hidden: boolean;
    editable: boolean;
    preferSlot: boolean;
    type: string;
    link: string;
    isForRowKey: boolean;
    extractTitleFromColumn: string;
    slotData: {};
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    getHref: (u: any) => any;
    doAction: (u: any) => any;
};
declare function Sl(t: any, u: any, i?: boolean): {
    key: string;
    label: string;
    sortable: boolean;
    hidden: boolean;
    editable: boolean;
    preferSlot: boolean;
    type: string;
    link: string;
    isForRowKey: boolean;
    extractTitleFromColumn: string;
    slotData: {};
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    getHref: (u: any) => any;
    doAction: (u: any) => any;
};
declare function hl(t: any, u: any, i: any, a?: boolean): {
    key: string;
    label: string;
    sortable: boolean;
    hidden: boolean;
    editable: boolean;
    preferSlot: boolean;
    type: string;
    link: string;
    isForRowKey: boolean;
    extractTitleFromColumn: string;
    slotData: {};
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    getHref: (u: any) => any;
    doAction: (u: any) => any;
};
declare function Tl(t: any, u: any, i: any, a?: boolean): {
    key: string;
    label: string;
    sortable: boolean;
    hidden: boolean;
    editable: boolean;
    preferSlot: boolean;
    type: string;
    link: string;
    isForRowKey: boolean;
    extractTitleFromColumn: string;
    slotData: {};
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    getHref: (u: any) => any;
    doAction: (u: any) => any;
};
declare function El(t: any, u: any, i?: boolean): {
    key: string;
    label: string;
    sortable: boolean;
    hidden: boolean;
    editable: boolean;
    preferSlot: boolean;
    type: string;
    link: string;
    isForRowKey: boolean;
    extractTitleFromColumn: string;
    slotData: {};
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    getHref: (u: any) => any;
    doAction: (u: any) => any;
};
declare function Dl(t: any, u: any, i?: boolean): {
    key: string;
    label: string;
    sortable: boolean;
    hidden: boolean;
    editable: boolean;
    preferSlot: boolean;
    type: string;
    link: string;
    isForRowKey: boolean;
    extractTitleFromColumn: string;
    slotData: {};
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    getHref: (u: any) => any;
    doAction: (u: any) => any;
};
declare function Cl(t: any, u: any, i?: boolean): {
    key: string;
    label: string;
    sortable: boolean;
    hidden: boolean;
    editable: boolean;
    preferSlot: boolean;
    type: string;
    link: string;
    isForRowKey: boolean;
    extractTitleFromColumn: string;
    slotData: {};
    field: {
        modelValue: string;
        type: any;
        placeholder: string;
        searchPlaceholder: string;
        label: string;
        labelIcon: string;
        labelIconAtEnd: boolean;
        name: string;
        autocomplete: boolean;
        disabled: boolean;
        readonly: boolean;
        readMode: boolean;
        allowReadModeSwitch: boolean;
        mandatory: boolean;
        showPassword: boolean;
        canClear: boolean;
        canUndo: boolean;
        canI18n: boolean;
        canStep: boolean;
        mandatoryMessage: string;
        infoMessage: string;
        errorMessage: string;
        step: number;
        enableAutoNumberFix: boolean;
        emptyValueSlot: string;
        slotData: {};
        resource: string;
        resourceData: {};
        validationResourceData: {};
        autoValidation: boolean;
        autoValidationType: string;
        validationStack: string;
        featuredButton: string;
        infoButtonEllipsis: boolean;
        fileName: string;
        customButtonText: string;
        customButtonClass: string;
        options: any[];
        multiple: boolean;
        multipleDisplay: any;
        multipleDisplayEdition: any;
        searchable: boolean;
        autoloadOptionsResource: boolean;
        optionsDownload: string;
        optionsModal: string;
        optionsModalData: {};
        optionsIcon: string;
        optionsResource: string;
        optionsResourceData: {};
        icon: string;
        download: string;
        modal: string;
        modalKey: string;
        modalData: {};
    };
    getHref: (u: any) => any;
    doAction: (u: any) => any;
};
declare namespace Rl {
    function install(t: any): void;
}
declare function Fl(t: any): boolean;
declare function Ll(t: any): boolean;
declare function Nl(t: any): void;
declare function Ml(t: any): boolean;
import { Field as Ae } from "lkt-field";
export { M as Column, gl as createActionColumn, Vl as createCheckColumn, bl as createColumn, wl as createEmailColumn, Il as createFileColumn, Bl as createFloatColumn, $l as createHiddenColumn, Sl as createIntegerColumn, hl as createLinkColumn, Tl as createSelectColumn, El as createSwitchColumn, Dl as createTelColumn, Cl as createTextColumn, Rl as default, Fl as setTableCreateButtonSlot, Ll as setTableDropButtonSlot, Nl as setTableEmptySlot, Ml as setTableNavButtonSlot };
